import os
import random
import logging
from datetime import datetime, time, timedelta

import pytz
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

# ---------------------- LOGGING ----------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
log = logging.getLogger("oraculo-bonus-bot")

# ---------------------- VARI√ÅVEIS DE AMBIENTE ----------------------
BOT_TOKEN  = os.getenv("BOT_TOKEN")
LINK_CAD   = os.getenv("LINK_CAD")     # HomeBroker / cadastro
LINK_VIDEO = os.getenv("LINK_VIDEO")   # V√≠deo explicativo
PDF_URL    = os.getenv("PDF_URL")      # Link direto do PDF
GROUP_LINK = os.getenv("GROUP_LINK", os.getenv("LINK_GROUP", ""))  # opcional; se faltar, omitimos o bot√£o ABRIR

TZ = pytz.timezone("America/Sao_Paulo")

# ---------------------- ESTADO / MEM√ìRIA ----------------------
ASK_NAME = 1
SUBSCRIBERS: set[int] = set()  # chat_ids que receber√£o as mensagens autom√°ticas

# ---------------------- UTIL ----------------------
EMOJIS = ["üí∞","üî•","üìà","‚ö°","üöÄ","üìä","üíé","üòé","üí•","üèÜ"]

def maybe_add_emoji(text: str) -> str:
    """60% de chance de acrescentar um emoji no FINAL da mensagem."""
    if random.random() < 0.6:
        return f"{text} {random.choice(EMOJIS)}"
    return text

def cta_keyboard() -> InlineKeyboardMarkup:
    """Alterna CTAs entre Come√ßar Agora (HomeBroker) e ABRIR (Grupo)."""
    # Sempre teremos o Come√ßar Agora; o ABRIR s√≥ se houver GROUP_LINK
    rows = []

    # linha 1: CTA principal (alternado)
    if random.random() < 0.5:
        rows.append([InlineKeyboardButton("üöÄ Come√ßar Agora", url=LINK_CAD)])
        if GROUP_LINK:
            rows.append([InlineKeyboardButton("‚úÖ ABRIR", url=GROUP_LINK)])
    else:
        if GROUP_LINK:
            rows.append([InlineKeyboardButton("‚úÖ ABRIR", url=GROUP_LINK)])
        rows.append([InlineKeyboardButton("üöÄ Come√ßar Agora", url=LINK_CAD)])

    # linha 2: v√≠deo explicativo √†s vezes
    if LINK_VIDEO and random.random() < 0.4:
        rows.append([InlineKeyboardButton("üé• Ver v√≠deo explicativo", url=LINK_VIDEO)])

    return InlineKeyboardMarkup(rows)

def fixed_shortcuts_keyboard() -> InlineKeyboardMarkup:
    """Atalhos fixos ap√≥s o onboarding."""
    buttons = [
        [InlineKeyboardButton("üé• Ver v√≠deo explicativo", url=LINK_VIDEO)] if LINK_VIDEO else [],
        [InlineKeyboardButton("üöÄ Come√ßar Agora", url=LINK_CAD)],
        [InlineKeyboardButton("‚ö° Sess√µes do Dia", callback_data="sessoes")],
    ]
    if GROUP_LINK:
        buttons.append([InlineKeyboardButton("‚úÖ ABRIR", url=GROUP_LINK)])
    # remove linhas vazias (caso n√£o tenha LINK_VIDEO)
    buttons = [row for row in buttons if row]
    return InlineKeyboardMarkup(buttons)

def br_time(h: int, m: int =0) -> datetime:
    now = datetime.now(TZ)
    dt = TZ.localize(datetime(now.year, now.month, now.day, h, m, 0))
    return dt

def rand_minute(base_dt: datetime, minus: int, plus: int) -> datetime:
    """Desloca base_dt aleatoriamente em minutos dentro de [-minus, +plus]."""
    delta_min = random.randint(-minus, plus)
    return base_dt + timedelta(minutes=delta_min)

# ---------------------- MENSAGENS (30 por ocasi√£o) ----------------------
PRE_MSGS = [
    "Se posiciona agora ‚Äî estamos abrindo a sess√£o!",
    "Aten√ß√£o: setup aquecendo para entradas certeiras.",
    "Foco total agora ‚Äî ajuste a banca e vem junto.",
    "Preparado? Sinal na pista em instantes.",
    "Gest√£o em dia, emo√ß√£o controlada. Partiu sess√£o.",
    "Quem chegou cedo, lucra primeiro. Bora!",
    "Hora de aquecer os motores da banca.",
    "Sem pressa, sem ansiedade: estrat√©gia acima de tudo.",
    "Coloque sua plataforma no gatilho.",
    "Checklist feito? Vamos come√ßar direito.",
    "Hoje a meta √© simples: consist√™ncia.",
    "Evite distra√ß√µes ‚Äî 15 minutos de foco rendem o dia.",
    "Aproveite as melhores janelas. Vamos nessa.",
    "Separa sua meta e seu stop. Disciplina!",
    "Vem pra cima com calma e precis√£o.",
    "A sess√£o vai come√ßar. Posiciona e respira.",
    "Nada de all-in ‚Äî gest√£o vence o jogo.",
    "Os melhores pontos surgem para quem est√° pronto.",
    "Aproveite os sinais com responsabilidade.",
    "Bora rodar como time vencedor.",
    "Quem age primeiro, lucra primeiro.",
    "Seu futuro agradece a disciplina de agora.",
    "Hora de executar, sem inventar moda.",
    "Ajuste o volume e bora operar.",
    "Opera√ß√£o n√£o √© loteria, √© m√©todo.",
    "Vem garantir o teu lugar na sess√£o.",
    "Partiu fazer o simples bem-feito.",
    "Resultados s√£o consequ√™ncia da execu√ß√£o.",
    "Aten√ß√£o total: prepare-se para a primeira entrada.",
    "Relaxa, respira e foco no plano."
]

DURING_MSGS = [
    "Entrada identificada. Fa√ßa o b√°sico e protege o caixa.",
    "Nada de afoba√ß√£o ‚Äî siga o plano.",
    "Melhor ponto chegando‚Ä¶ olhos na tela.",
    "Confirme a leitura antes de clicar.",
    "Metas pequenas, const√¢ncia gigante.",
    "Protege o lucro e segue a gest√£o.",
    "Se n√£o encaixar no plano, pula a opera√ß√£o.",
    "Mercado d√° sinal todo dia; calma, sempre tem pr√≥ximo.",
    "A entrada certa paga o dia.",
    "Confian√ßa no m√©todo > impulso.",
    "Lembre que menos √© mais.",
    "Voc√™ n√£o precisa vencer todas, s√≥ ser consistente.",
    "Ajuste fino agora vale ouro.",
    "Sem FOMO ‚Äî siga os sinais, n√£o as emo√ß√µes.",
    "Se moveu demais, espera a pr√≥xima oportunidade.",
    "Trabalha com o que o mercado te d√°.",
    "A confirma√ß√£o √© sua melhor amiga.",
    "Seguran√ßa primeiro, sempre.",
    "Lembre da sua meta ‚Äî n√£o force opera√ß√£o.",
    "Entrou? Gest√£o apertada e sem teimosia.",
    "Nada de vingar trade ‚Äî simplesmente segue.",
    "Oportunidade vista n√£o significa obriga√ß√£o de entrar.",
    "Cumpra sua regra, proteja seu caixa.",
    "Paci√™ncia paga mais do que pressa.",
    "A leitura confirma a decis√£o ‚Äî n√£o o contr√°rio.",
    "Sinal bom aparece de novo. Calma.",
    "Quando o mercado acelera, voc√™ desacelera.",
    "Cada clique √© uma decis√£o ‚Äî fa√ßa valer.",
    "Entrada limpa > entrada r√°pida.",
    "Continue fazendo o simples."
]

POST_MSGS = [
    "Sess√£o encerrada. Anote seus resultados e revise 2 pontos de melhoria.",
    "Fechamos mais uma. Consist√™ncia acima de tudo.",
    "Resultado anotado? Gest√£o em dia, mente tranquila.",
    "Quem domina a gest√£o, domina o jogo.",
    "Pausa consciente agora evita erro depois.",
    "Parab√©ns por seguir o plano ‚Äî isso vale mais que qualquer win.",
    "Fechamento feito. N√£o devolva lucro fora de hora.",
    "Revis√£o curtinha: 3 acertos, 1 ajuste e partiu pr√≥xima sess√£o.",
    "Stop dado? Aceita e segue o plano.",
    "Meta batida? Zera a plataforma e comemora com responsabilidade.",
    "Aprendizado anotado √© lucro futuro.",
    "Sem revenge. Amanh√£ tem mercado de novo.",
    "A for√ßa est√° na disciplina di√°ria.",
    "Voc√™ est√° construindo consist√™ncia. Continua.",
    "Nada de operar por t√©dio ‚Äî fecha a tela.",
    "Controle > Gan√¢ncia. Esse √© o caminho.",
    "O que funcionou hoje? Repita. O resto, descarte.",
    "A paz de quem seguiu a gest√£o √© impag√°vel.",
    "Tamo junto. Pr√≥xima sess√£o te espera.",
    "Respira, hidrata e volta no hor√°rio certo.",
    "Resultado n√£o define voc√™; processo sim.",
    "Seja frio no win e no loss.",
    "Quem escreve, evolui mais r√°pido.",
    "Revis√£o final feita. At√© a pr√≥xima!",
    "Seu eu do futuro te agradece pela disciplina.",
    "Foco no longo prazo: consist√™ncia di√°ria.",
    "Ajuste pequeno hoje evita erro grande amanh√£.",
    "Se motive pela execu√ß√£o, n√£o pelo hype.",
    "Orgulho de quem fez o simples.",
    "Sess√£o conclu√≠da com responsabilidade."
]

GOOD_NIGHT_MSGS = [
    "Dia fechado. Durma bem e recarregue ‚Äî amanh√£ tem mais.",
    "Boa noite! Consist√™ncia √© constru√≠da no descanso tamb√©m.",
    "Orgulhe-se do que construiu hoje. At√© amanh√£!",
    "Foco, f√© e gest√£o. Amanh√£ seguimos.",
    "Descanse a mente para evoluir no pr√≥ximo dia.",
    "Quem respeita o processo descansa sem culpa.",
    "Fechou por hoje. Gratid√£o e at√© a pr√≥xima.",
    "Cuidar do sono √© parte da estrat√©gia.",
    "Amanh√£ escrevemos mais uma p√°gina de consist√™ncia.",
    "Boa noite, time! Voc√™s est√£o no caminho certo.",
    "Voc√™ fez o que precisava hoje. Agora, descanso.",
    "Resultados gostam de mente descansada.",
    "Guerreiro descansa para voltar melhor.",
    "Paz na mente, gest√£o no bolso.",
    "Desliga as telas ‚Äî amanh√£ a gente voa.",
    "Fechamento conclu√≠do. At√© a pr√≥xima sess√£o!",
    "Tudo certo por hoje. Boa noite!",
    "A const√¢ncia come√ßa no h√°bito. Durma bem.",
    "Se cuide ‚Äî disciplina tamb√©m √© sa√∫de.",
    "Amanh√£ a gente repete o m√©todo. Boa noite!",
    "Quem √© consistente sabe a hora de parar.",
    "Rotina vence motiva√ß√£o. Bom descanso!",
    "Nada de operar de madrugada. Durma :)",
    "Voc√™ est√° construindo o que sonha. Boa noite.",
    "Recarrega que o jogo √© di√°rio.",
    "Feito √© melhor que perfeito. At√© amanh√£!",
    "Orgulho do time. Boa noite!",
    "Amanh√£ tem mais execu√ß√£o simples.",
    "Descanse com a consci√™ncia tranquila.",
    "Fechamos! Bons sonhos."
]

# ---------------------- HANDLERS ----------------------
WELCOME_TXT = "Opa, seja bem-vindo üòé Me fala teu nome e j√° libero teu b√¥nus!"
AFTER_NAME_TXT = "Shooow, {nome}! Parab√©ns por fazer parte do nosso time!\n\nAqui est√° seu b√¥nus üëá"

SESSOES_TXT = (
    "‚ö° Sess√µes do dia\n‚Ä¢ 10:00\n‚Ä¢ 15:00\n‚Ä¢ 20:00\n\n"
    "üóìÔ∏è Cronograma semanal:\n‚Ä¢ Segunda a Sexta: 10:00, 15:00, 20:00"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    await update.message.reply_text(WELCOME_TXT)
    return ASK_NAME

async def got_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return ConversationHandler.END

    name = update.message.text.strip()
    SUBSCRIBERS.add(update.effective_chat.id)

    # 1) Mensagem + PDF
    await update.message.reply_text(AFTER_NAME_TXT.format(nome=name))
    if PDF_URL:
        try:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=PDF_URL,
                caption="üìÑ Guia Or√°culo Black ‚Äî seu material de in√≠cio!"
            )
        except Exception as e:
            log.warning(f"Falha ao enviar PDF: {e}")

    # 2) Mensagem ‚ÄúCLIQUE AQUI...‚Äù + bot√£o Come√ßar Agora
    if LINK_CAD:
        txt = "**CLIQUE AQUI** para receber 10.000 e come√ßar a operar agora mesmo:"
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{txt}\n{LINK_CAD}",
            parse_mode=ParseMode.MARKDOWN
        )

    # 3) Atalhos r√°pidos (sem ‚ÄúResgatar B√¥nus‚Äù no futuro)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="Atalhos r√°pidos pra come√ßar üëá",
        reply_markup=fixed_shortcuts_keyboard()
    )
    return ConversationHandler.END

async def sessoes_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(SESSOES_TXT)

# ---------------------- ENVIO AOS INSCRITOS ----------------------
async def broadcast(context: ContextTypes.DEFAULT_TYPE, pool: list[str], tag: str):
    """Envia 1 mensagem escolhida da pool + CTA aos inscritos."""
    if not SUBSCRIBERS:
        return
    text = maybe_add_emoji(random.choice(pool))
    for chat_id in list(SUBSCRIBERS):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=cta_keyboard())
        except Exception as e:
            log.warning(f"Falha ao enviar ({tag}) para {chat_id}: {e}")

# ---- Fun√ß√µes por fase (pr√©, durante com m√∫ltiplas msgs, p√≥s, boa-noite)
async def send_pre_morning(context):  await broadcast(context, PRE_MSGS, "pre_morning")
async def send_pre_afternoon(context): await broadcast(context, PRE_MSGS, "pre_afternoon")
async def send_pre_night(context):     await broadcast(context, PRE_MSGS, "pre_night")

async def send_post_morning(context):  await broadcast(context, POST_MSGS, "post_morning")
async def send_post_afternoon(context):await broadcast(context, POST_MSGS, "post_afternoon")
async def send_post_night(context):    await broadcast(context, POST_MSGS, "post_night")

async def send_good_night(context):    await broadcast(context, GOOD_NIGHT_MSGS, "good_night")

async def send_during_burst(context: ContextTypes.DEFAULT_TYPE, tag: str):
    """Envia 2 a 3 mensagens durante a janela da sess√£o (20 min)."""
    n = random.randint(2, 3)
    for i in range(n):
        await broadcast(context, DURING_MSGS, f"during_{tag}")
        # espera entre 3 a 7 minutos entre mensagens
        await context.job_queue.run_once(lambda ctx: None, when=0)  # tick
        await context.application.create_task(_sleep_minutes(random.randint(3, 7)))

async def _sleep_minutes(m: int):
    await asyncio.sleep(m * 60)

# ---------------------- AGENDAMENTO ----------------------
import asyncio

def schedule_daily_jobs(app):
    jq = app.job_queue

    # Pr√©-sess√µes (aleat√≥rio pr√≥ximo ao hor√°rio)
    jq.run_daily(send_pre_morning, rand_minute(br_time(9,50), 5, 5).timetz(), name="pre_morning", timezone=TZ)
    jq.run_daily(send_pre_afternoon, rand_minute(br_time(14,50), 5, 5).timetz(), name="pre_afternoon", timezone=TZ)
    jq.run_daily(send_pre_night, rand_minute(br_time(19,50), 5, 5).timetz(), name="pre_night", timezone=TZ)

    # Durante: agenda uma tarefa que dispara um burst entre 10:00‚Äì10:20, 15:00‚Äì15:20, 20:00‚Äì20:20
    async def morning_burst(ctx): await send_during_burst(ctx, "morning")
    async def afternoon_burst(ctx): await send_during_burst(ctx, "afternoon")
    async def night_burst(ctx): await send_during_burst(ctx, "night")

    # usamos run_daily para disparar no in√≠cio da janela; os envios internos usam sleeps aleat√≥rios
    jq.run_daily(morning_burst, br_time(10, 0).timetz(), name="during_morning", timezone=TZ)
    jq.run_daily(afternoon_burst, br_time(15, 0).timetz(), name="during_afternoon", timezone=TZ)
    jq.run_daily(night_burst, br_time(20, 0).timetz(), name="during_night", timezone=TZ)

    # P√≥s-sess√µes (com leve aleatoriza√ß√£o)
    jq.run_daily(send_post_morning, rand_minute(br_time(10,40), 5, 5).timetz(), name="post_morning", timezone=TZ)
    jq.run_daily(send_post_afternoon, rand_minute(br_time(15,40), 5, 5).timetz(), name="post_afternoon", timezone=TZ)
    jq.run_daily(send_post_night, rand_minute(br_time(21,0), 5, 5).timetz(), name="post_night", timezone=TZ)

    # Boa noite fixa
    jq.run_daily(send_good_night, time(22,30,0, tzinfo=TZ), name="good_night", timezone=TZ)

# ---------------------- MAIN ----------------------
def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente.")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, got_name)]
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True
    )
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(sessoes_btn, pattern="^sessoes$"))

    # agenda jobs di√°rios
    schedule_daily_jobs(app)

    log.info("Bot iniciado. Agendadores ativos (BR -03:00).")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
